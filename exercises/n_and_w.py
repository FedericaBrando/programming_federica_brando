###################################################################################
# pseudo code
# given two sequences of lenght m and n
# 1) build a matrix filled with zero with (mxn)
# 2) init 1st row and 1st col f(i,0) and f(0,i)
# iteration f(0,0) = 0
# f(i,j) = max
# return f
##################################################################################

def matrix_dict(matrix_file):
    list = []
    for line in matrix_file:
        line = line.rstrip()
        row = line.split()
        list.append(row)
    dict = {}
    for i in range(1, len(list)):
        for j in range(0, len(list[0])):
            dict[list[i][0] + list[0][j]] = int(list[i][j+1])
    return dict

def score_trace(s1, s2, mx_sc, pen):
    C = len(s1) + 1  # row
    R = len(s2) + 1  # col
    F = [[0] * C for x in range(R)]  # list comprehension makes a list of list filled with 0s MxN
    P = [['0'] * C for x in range(R)]  # makes another list filled with '0'

    # init first row
    for righe in range(R):
        F[righe][0] = righe * d
        P[righe][0] = 'u'

    # init first col
    for colonne in range(C):
        F[0][colonne] = colonne * d
        P[0][colonne] = 'l'

    P[0][0] = '0'

    # iteration
    for row in range(1, R):
        for col in range(1, C):
            sR = F[row - 1][col] + pen
            sD = F[row - 1][col - 1] + mx_sc[s1[col - 1] + s2[row - 1]]
            sC = F[row][col - 1] + pen
            F[row][col], P[row][col] = max(list(zip((sR, sC, sD), ("u", "l", "D"))))  #

    return F, P


def score_ali(F, P, seq1, seq2):
    # i have to start from the bottom right cell
    col = len(F[0]) - 1
    row = len(P) - 1
    template = ''
    target = ''
    intra = ''
    score = F[row][col]

    while row != 0 or col != 0:
        if P[row][col] == 'D':
            template += seq1[col - 1]
            target += seq2[row - 1]
            intra += '|'
            row -= 1
            col -= 1
        elif P[row][col] == 'l':
            template += seq1[col - 1]
            target += '-'
            intra += ' '
            col -= 1
        elif P[row][col] == 'u':
            template += '-'
            target += seq2[row - 1]
            intra += ' '
            row -= 1

    intra = intra[::-1]
    template = template[::-1]
    target = target[::-1]
    return template, target, intra, score


# seq1_file= open('/home/fecke/PycharmProjects/programming_stefano_roncelli/data/titin_hu.txt', 'r')
# seq1 = ''
# for line in seq1_file:
#     line = line.rstrip()
#     seq1 += line

seq1 = 'MTTQAPTFTQPLQSVVVLEGSTATFEAHISGFPVPEVSWFRDGQVISTSTLPGVQISFSDGRAKLTIPAVTKANSGRYSLKATNGSGQATSTAELLVKAETAPPNFVQRLQSMTVRQGSQVRLQVRVTGIPTPVVKFYRDGAEIQSSLDFQISQEGDLYSLLIAEAYPEDSGTYSVNATNSVGRATSTAELLVQGEEEVPAKKTKTIVSTAQISESRQTRIEKKIEAHFDARSIATVEMVIDGAAGQQLPHKTPPRIPPKPKSRSPTPPSIAAKAQLARQQSPSPIRHSPSPVRHVRAPTPSPVRSVSPAARISTSPIRSVRSPLLMRKTQASTVATGPEVPPPWKQEGYVASSSEAEMRETTLTTSTQIRTEERWEGRYGVQEQVTISGAAGAAASVSASASYAAEAVATGAKEVKQDADKSAAVATVVAAVDMARVREPVISAVEQTAQRTTTTAVHIQPAQEQVRKEAEKTAVTKVVVAADKAKEQELKSRTKEVITTKQEQMHVTHEQIRKETEKTFVPKVVISAAKAKEQETRISEEITKKQKQVTQEAIRQETEITAASMVVVATAKSTKLETVPGAQEETTTQQDQMHLSYEKIMKETRKTVVPKVIVATPKVKEQDLVSRGREGITTKREQVQITQEKMRKEAEKTALSTIAVATAKAKEQETILRTRETMATRQEQIQVTHGKVDVGKKAEAVATVVAAVDQARVREPREPGHLEESYAQQTTLEYGYKERISAAKVAEPPQRPASEPHVVPKAVKPRVIQAPSETHIKTTDQKGMHISSQIKKTTDLTTERLVHVDKRPRTASPHFTVSKISVPKTEHGYEASIAGSAIATLQKELSATSSAQKITKSVKAPTVKPSETRVRAEPTPLPQFPFADTPDTYKSEAGVEVKKEVGVSITGTTVREERFEVLHGREAKVTETARVPAPVEIPVTPPTLVSGLKNVTVIEGESVTLECHISGYPSPTVTWYREDYQIESSIDFQITFQSGIARLMIREAFAEDSGRFTCSAVNEAGTVSTSCYLAVQVSEEFEKETTAVTEKFTTEEKRFVESRDVVMTDTSLTEEQAGPGEPAAPYFITKPVVQKLVEGGSVVFGCQVGGNPKPHVYWKKSGVPLTTGYRYKVSYNKQTGECKLVISMTFADDAGEYTIVVRNKHGETSASASLLEEADYELLMKSQQEMLYQTQVTAFVQEPKVGETAPGFVYSEYEKEYEKEQALIRKKMAKDTVVVRTYVEDQEFHISSFEERLIKEIEYRIIKTTLEELLEEDGEEKMAVDISESEAVESGFDSRIKNYRILEGMGVTFHCKMSGYPLPKIAWYKDGKRIKHGERYQMDFLQDGRASLRIPVVLPEDEGIYTAFASNIKGNAICSGKLYVEPAAPLGAPTYIPTLEPVSRIRSLSPRSVSRSPIRMSPARMSPARMSPARMSPARMSPGRRLEETDESQLERLYKPVFVLKPVSFKCLEGQTARFDLKVVGRPMPETFWFHDGQQIVNDYTHKVVIKEDGTQSLIIVPATPSDSGEWTVVAQNRAGRSSISVILTVEAVEHQVKPMFVEKLKNVNIKEGSRLEMKVRATGNPNPDIVWLKNSDIIVPHKYPKIRIEGTKGEAALKIDSTVSQDSAWYTATAINKAGRDTTRCKVNVEVEFAEPEPERKLIIPRGTYRAKEIAAPELEPLHLRYGQEQWEEGDLYDKEKQQKPFFKKKLTSLRLKRFGPAHFECRLTPIGDPTMVVEWLHDGKPLEAANRLRMINEFGYCSLDYGVAYSRDSGIITCRATNKYGTDHTSATLIVKDEKSLVEESQLPEGRKGLQRIEELERMAHEGALTGVTTDQKEKQKPDIVLYPEPVRVLEGETARFRCRVTGYPQPKVNWYLNGQLIRKSKRFRVRYDGIHYLDIVDCKSYDTGEVKVTAENPEGVIEHKVKLEIQQREDFRSVLRRAPEPRPEFHVHEPGKLQFEVQKVDRPVDTTETKEVVKLKRAERITHEKVPEESEELRSKFKRRTEEGYYEAITAVELKSRKKDESYEELLRKTKDELLHWTKELTEEEKKALAEEGKITIPTFKPDKIELSPSMEAPKIFERIQSQTVGQGSDAHFRVRVVGKPDPECEWYKNGVKIERSDRIYWYWPEDNVCELVIRDVTAEDSASIMVKAINIAGETSSHAFLLVQAKQLITFTQELQDVVAKEKDTMATFECETSEPFVKVKWYKDGMEVHEGDKYRMHSDRKVHFLSILTIDTSDAEDYSCVLVEDENVKTTAKLIVEGAVVEFVKELQDIEVPESYSGELECIVSPENIEGKWYHNDVELKSNGKYTITSRRGRQNLTVKDVTKEDQGEYSFVIDGKKTTCKLKMKPRPIAILQGLSDQKVCEGDIVQLEVKVSLESVEGVWMKDGQEVQPSDRVHIVIDKQSHMLLIEDMTKEDAGNYSFTIPALGLSTSGRVSVYSVDVITPLKDVNVIEGTKAVLECKVSVPDVTSVKWYLNDEQIKPDDRVQAIVKGTKQRLVINRTHASDEGPYKLIVGRVETNCNLSVEKIKIIRGLRDLTCTETQNVVFEVELSHSGIDVLWNFKDKEIKPSSKYKIEAHGKIYKLTVLNMMKDDEGKYTFYAGENMTSGKLTVAGGAISKPLTDQTVAESQEAVFECEVANPDSKGEWLRDGKHLPLTNNIRSESDGHKRRLIIAATKLDDIGEYTYKVATSKTSAKLKVEAVKIKKTLKNLTVTETQDAVFTVELTHPNVKGVQWIKNGVVLESNEKYAISVKGTIYSLRIKNCAIVDESVYGFRLGRLGASARLHVETVKIIKKPKDVTALENATVAFEVSVSHDTVPVKWFHKSVEIKPSDKHRLVSERKVHKLMLQNISPSDAGEYTAVVGQLECKAKLFVETLHITKTMKNIEVPETKTASFECEVSHFNVPSMWLKNGVEIEMSEKFKIVVQGKLHQLIIMNTSTEDSAEYTFVCGNDQVSATLTVTPIMITSMLKDINAEEKDTITFEVTVNYEGISYKWLKNGVEIKSTDKCQMRTKKLTHSLNIRNVHFGDAADYTFVAGKATSTATLYVEARHIEFRKHIKDIKVLEKKRAMFECEVSEPDITVQWMKDDQELQITDRIKIQKEKYVHRLLIPSTRMSDAGKYTVVAGGNVSTAKLFVEGRDVRIRSIKKEVQVIEKQRAVVEFEVNEDDVDAHWYKDGIEINFQVQERHKYVVERRIHRMFISETRQSDAGEYTFVAGRNRSSVTLYVNAPEPPQVLQELQPVTVQSGKPARFCAVISGRPQPKISWYKEEQLLSTGFKCKFLHDGQEYTLLLIEAFPEDAAVYTCEAKNDYGVATTSASLSVEVPEVVSPDQEMPVYPPAIITPLQDTVTSEGQPARFQCRVSGTDLKVSWYSKDKKIKPSRFFRMTQFEDTYQLEIAEAYPEDEGTYTFVASNAVGQVSSTANLSLEAPESILHERIEQEIEMEMKEFSSSFLSAEEEGLHSAELQLSKINET'
seq2 = 'MTTQAPMFTQPLQSVVVLEGSTATFEAHVSGSPVPEVSWFRDGQVISTSTLPGVQISFSDGRARLMIPAVTKANSGRYSLRATNGSGQATSTAELLVTAETAPPNFSQRLQSMTVRQGSQVRLQVRVTGIPTPVVKFYRDGAEIQSSLDFQISQEGDLYSLLIAEAYPEDSGTYSVNATNSVGRATSTAELVVQGEEVVPAKKTKTIVSTAQISETRQTRIEKKIEAHFDARSIATVEMVIDGATGQLPHKTPPRIPPKPKSRSPTPPSIAAKAQLARQQSPSPIRHSPSPVRHVRAPTPSPVRSVSPAGRISTSPIRSVKSPLLIRKTQTTTMATGPEVPPPWKQEGYVASSTEAEMRETTMTSSTQIRREERWEGRYGVQEQVTISGAAAAAASASVSSSFTAGAITTGTKEVKQETDKSAAVATVVAAVDMARVREPAISAVEQTAQRTTTTAVHIQPAQEQARKEAEKTAVTKVVVAADKAKEQELKSRTREVMVTTQEQTHISHEQIRKETEKAFVPKVVISATKAKEQETRITGEITTKQEQKRITQETIRQETEEIAASMVVVATAKSTKLEAAVGVQEETAIQQDQMHLTHEQMMKETRKTVVPKVIVATPKIKEQDLVSRSREAITTKRDQVQITQEKKRKEVETTALSTIAVATAKAKEQETVLRSREAMATRQEHIQVTHGQVGVGKKAEAVATVVAAVDQARVREPREPTHVEESHSQQTTLEYGYKEHISTTKVPEQPRRPASEPHVVPQAVKPAVIQAPSETHIKTTDQMGMHISSQVKKTTDISTERLVHVDKRPRTASPHFTVSKISVPKTEHGYEASIAGSAIATLQKELSATSSTQKITKSVKAPTVKPGETRVRAEPTPSPQFPFADMPPPDTYKSQAGIEVKKEVGVSISGSTVREEHFEVLRGREAKVTETARVPAPAEVPVTPPTLVSGLKNVTVIEGESVTLECHISGYPSPKVTWYREDYQIESSIDFQITFQGGIARLMIREAFAEDSGRFTCSAVNEAGTVSTSCYLAVQVSEEFDKETTLTEKFATEEKRFVESRDVVMTDTSITEEQAGPGEPAAPFFISKPVVQKLVEGGSVVFECQIGGNPKPHVYWKKSGVPLTTGYRYKVSYNKQTGECRLVISMTFADDAGEYTIVIRNKHGETSASASLLEEADYEALVKTQQEMLYQTQMSTFIQEPKVGEIAPGFAYSEYEKEYEKEQALIRKKMAKDTVMVRTFVEDQEFHISSFEERLIKEIEYRIIKTTLEELLEEDGEEKMAVDISESEAIESGFDIRIKNYRILEGMGVTFHCKMSGYPLPKIAWYKDGKRIRHGERYQMDFLQDGRASLRIPVVLPEDEGIYTAFASNIKGNAICSGKLYVEPAAPFSAPTYMPTPEAVSRIRSVSPRSLSRSPIRMSPAMSPARMSPARMSPARMSPARMSPGRRLEETDESQLERLYKPVFVLKPASFKCLEGQTARFDLKVVGRPMPETFWFHNGQQIVNDYTHKVVIKEDGTQSLIIVPASPSDSGEWTVVAQNRAGKSTISVTLTVEAVEHQIKPAFVEKLKNVNIKEGSRLEMKVRATGNPNPDIVWLKNSDIIVPHKYPRIRIEGTRGEAALKIDSIISQDSAWYTATAINKAGRDTTRCKVNVEVEFAEPEPERKLIIPRGTYRAKEIAAPELEPLHLRYGQEQWEEGDLYDKEKQQKPFFKKKLTSLRLKRFGPAHFECRLTPIGDPTMVVEWLHDGKPLEAANRLRMINEFGYCSLDYGAAYSRDSGVITCRATNKYGTDHTSATLIVKDEKSLVEESQLPDGKKGLQRIEELERMAHEGALTGVTTDQKEKQKPDIVLFPEPVRVLEGETARFRCRVTGYPQPKVNWYLNGQLIRKSKRFRVRYDGIHYLDIVDCKSYDTGEVKVTAENPEGVTEHKVKLEIQQREDFRSVLRRAPEPKPEFHVHEPGKLQFEVQKVDRPVDTSETKEVVKLKRAERITHEKVSEESEELRSKFKRRTEEGYYEAITAVELKSRKKDESYEELLKKTKDELLHWTKELTEEEKKALAEEGKITIPTFKPERIELSPSMEAPKIFERIQSQTVGQGSDAHFRVRVVGKPDPECEWYKNGVKIERSDRIYWYWPEDNVCELVIRDVTAEDSASIMVKAINIAGETSSHAFLLVQAKQLITFTQELQDVVAKEKDTMATFECETSEPFIKVKWYKDGIEVHAGDKYRMHSDRKVHFLSVLTIDTSDAEDYSCVLVEDENIKTTAKLIVEGAVVEFVKELQDIEVPESYSGELECIISPENIEGKWYHNDVELKSNGKYSITSRRGRQNLTVKDVTKEDQGEYSFVVDGKKTTCKLKMKPRPIAILQGLSDQKVCEGDIVQLEVKVSLENVEGVWMKDGQEVQHSDRVHIVIDKQSHMLLIEDMTKEDAGNYSFTIPALGLSTSGNVSVYSVDVITPLKDVNVIEGTKAVLECKVSVPDVTSVKWYLNDEQIKPDDRVQSIVKGTKQRLVINRTHASDEGPYKLMVGRVETSCNLSVEKIKIIRGLRDLTCTETQNVVFEVELSHSGIDVVWNFKGKEIKPSSKYKIEAHGKIYKLTVLNMMKDDEGEYAFYAGENTTSGKLTVAGGAISTPLTDQTVAESQEAVFECEVANPESEGEWLKDGKHLALSNNFRGESDGHKRRLVIAAAKLDDAGEYTYKVATSKTSAKLKVEAVKIKKTLRNLTVTETQDAVFSVELTHPDVKGVQWIKNGVVLDSNDKYE'
#seq1 = 'ACTVTCGRTIGY'
#seq2 = 'TVTC'
# seq2_file = open('/home/fecke/PycharmProjects/programming_stefano_roncelli/data/titin_mo.txt', 'r')
# seq2 = ''
# for line in seq2_file:
#     line = line.rstrip()
#     seq2 += line

mx_file = open('../data/blosum.txt', 'r')
S = matrix_dict(mx_file)

d = -2

f, p = score_trace(seq1, seq2, S, d)

# for k in range(len(f)):
#     print (f[k])
# for z in range(len(p)):
#     print(p[z])

s1, s2, intra, sc = score_ali(f, p, seq1, seq2)

for i in range(0, len(s1), 60):
    print('\n', s1[i: i+60], '\n', intra[i:i+60], "\n", s2[i:i+60])

print("\nWith a score of: ", sc)
